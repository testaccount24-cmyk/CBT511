Install:
Install the cobol pgm into ISPLLIB. I use DYN,OPT(FULL),NUMPROC(PFD).
Install the clist     into SYSPROC.
Install the panels    into ISPPLIB    OR   use LIBDEFs in the CLIST.
Install the skeletons into ISPSLIB    OR   use LIBDEFs in the CLIST.
In foreground, invoke the function by typing in "TSO VSAMCL"
In batch,      invoke the function by modeling the sample JCL found
in this doc, or found in the AP1PVSAM panel.

Function/Features:

1) It can be used in foreground for individual files to:
   a)  examine how efficiently the file is allocated, and how much
       each component costs (used space cost, free space cost,
       unused space cost, etc.)
   b)  Run an index analysis to see if the index CI is adequate
       to store all of the keys of a data CI.
   c)  Run a job to calculate a file's true average LRECL
   d)  Run a job to reorganize the file with 18K data cisize and
       2K index cisize

2) It can be used in a production batch step to:
   a)  monitor a list of given VSAM datasets and print out exception
       reports
   b)  automatically generate fresh delete/define cards, based on
       the exception report, as well as reorg JCL.
   c)  save the delete/define cards in a PDS (specified in the
       control cards; the PDS and member name is specified on
       each control card)
   d)  step can run in simulation mode (produces the exception
       change reports, but not the reorg JCL)
   e)  supports comment cards in the control card deck
   f)  automatically submits (internal reader) the reorg JCL
       if not in simulation mode
   g)  Simulation mode can be turned on or off at the file level

3) Datapacker (Data Accelerator) Support

There is a foreground (ISPF) and a background (batch) function.
The foreground function operates on a single VSAM dataset, specified
in an initial panel (panel=IDC).
A secondary screen, scrollable, displays all of the following:

Watch section:  Green=Good, Yellow=Watch it, Red=Problem <== Should be colorful

  Records total:         11335343
  Allocated cylinders:       1240    Percent used            100.00
  CI splits:                    0    Free CI:                     0
  CA splits:                    0    Free CA:                     0
  Extents:                     15    Data CISIZE:             18432
  Key length:                  28    Index CISIZE:             2048
  Bytes in CI free space        0

Reallocate the file?     ===>      (Yes-JCL will be generated to reallocate
                                    the file in the most efficient manner
                                    possible. Data will be preserved).
Index analysis?          ===>      (Yes-JCL will be generated that will
                                    determine if the index adequately
                                    addresses the data portion).
Calculate true AVGLRECL? ===>      (Yes-JCL will be generated that will
                                    calculate the TRUE average record length).
Cost section:
                                ANNUAL COST     per cent

  CI free space:                       0.00         0.00
  CA free space:                       0.00         0.00
  All free space:                      0.00         0.00
  Unused portion (incl free):          0.00         0.00
  Used portion (incl free):        7,275.10       100.00
  Unused portion:                      0.00         0.00
  Entire file:                     7,275.10       100.00
Space section:

  Records per cylinder:                        9141
  Records that can be added without
   going into further extents:                    0
  Primary allocation:                           240
  Secondary allocation:                          24
  Average LRECL (rarely accurate):              120
  Max LRECL:                                    480

CI free space percentages to accomodate n number of inserts per CI:

    N CI percent        N CI percent        N CI percent

    1          1        4          2        7          4
    2          1        5          3        8          4
    3          2        6          3        9          5

I/O section:  (I/O stats since last load)

  Records read:              56679,584
  Records updated:                   0
  Records inserted:                  0
  Records deleted:                   0

[ The next section is semi-fixed text. The text is fixed, but the
  values are variables from the top of the screen ]

Explanation of the fields that are in the "watch" section:

PERCENT USED:  If a file has lots of unused space (i.e. has a low
 100.00        percent used value), that space is billed to the
               client. On the other hand, a high percent used
               value may mean that there is little room for
               growth; be aware, however, that free space--if
               defined--will allow for inserts, even if the file
               is otherwise "full." In addition, VSAM can allocate
               up to 123 extents, so one way or the other, about
               the only thing that can cause a VSAM file to really
               fill up is end-of-volume (or a system defined limit
               other than 123). Rule of thumb: the larger the
               file, the higher the percent used value should be.

Alloc CYLS:    Large files cost more. Keeping space requirements
   1240        to a minimum saves money and frees up resources.
               (Rough 1997 value: 48 cents per cylinder per
               month).

CI/CA splits:  CI splits aren't so bad. CA splits are. Here's why:
CI:     0      when an insert causes a CI split, no DASD head
CA:     0      movement is required.  All necessary data shuffling
               occurs within a single cylinder boundary. A CA
               split, on the other hand, causes the DASD device to
               shuffle up to 2 or 3 cylinders (i.e. head
               movement). CA splits add lots of overhead for an
               online transaction and even for a batch job.

               Both forms of splits chop up the file, which is
               why periodic reorgs are necessary to reclaim some
               wasted space.

               It is difficult to decide how much free space to
               define for VSAM files. For starters, though, CI
               free space should reflect an even multiple of
               records. The bottom line: which is cheaper in your
               opinion:  allocating too much free space, or
               monitoring, redefining, and reorging the file?

               Myth: a file that has a lot of splits slows down
               online random retrievals. FALSE. Random retrievals
               do not read sequentially. The index is read to get
               the address, and then the data is read.

Free space:    Calculating free space is difficult at best. Here
CI:     0      are some rules of thumb:
CA:     0
               * Make sure the percentage of free space in the CI
                 is at least large enough to hold one record. For
                 example, don't code 10 per cent CI free space
                 (roughly 409 bytes with a 4K data cisize) when
                 your average LRECL is greater than 409 bytes.
                 The CI free space percentage will be RED if the
                 free space is too small for the average record.

     * Code less and less free space for larger and larger files.
       Reasoning:  Very large files will have hundreds or thousands
       of chunks of free space that will most likely never be used
       (but you pay for it anyway). Even with free space defined,
       splits still occur when clustered insert activity fills up a
       chunk of free space. Rule of thumb: for very large files and
       even medium sized files, code enough CI free space to allow
       for 1 or 2 record inserts, and a modest amount of CA free
       space.

     * Insert activity low or very low: code little or no free space.

     * Insert activity consists of single records being inserted
       all over the file: code enough free space for one record
       per CI, and enough CA free space for one 1 or 2 CI splits.

     * Insert activity consists of groups of records being inserted
       all over the file (as is the case with many files): code
       enough free space for at least 1, 2, or more records to be
       inserted in each CI, and enough CA free space for several
       CI splits.

Key length:    You can't change the key length, but the key
 28            length can seriously affect space usage, depending
               on how large the index or data CI is.

               If you have a large key (>30) and normal cisizes
               (such as 4K for the data portion and 1K or 2K for
               the index portion), chances are good that a part
               of the data portion cannot be indexed, thus
               wasting space.

               VSAM builds an index record which contains keys
               and addresses of the first record of each control
               interval in the data portion.  The keys and
               addresses for an entire control area must fit in
               one index record (i.e. index cisize). If they
               don't fit, VSAM ignores space in each control area
               and continues writing in the next control area.

               With 3390 devices and a 4K data cisize, you get
               185 control intervals per cylinder (control area).
               So if 185 keys and their corresponding addresses
               can't fit in one index record, you're wasting
               space.  If the key length value is yellow or red,
               submit the "Index Analysis" job.  If the index
               analysis shows that the index CI is too small,
               make sure it is 2K, and increase the data CI to
               8K. That should fix it.

Extents:       There is no law that says a VSAM file can't have
 15            multiple extents; however, multiple extents may be
               an indication of:

               * primary allocation inadequate
               * insufficient free space
               * the file is not being reorganized frequently enough

CI sizes:      There is no great science to CI sizes, either.
Index   2048   VSAM can take CI sizes in multiples of 512, 1K,
Data   18432   2K, or 4K (see the IBM manuals if you need to know
               exact rules), but not all CI sizes are efficient
               in terms of space allocation or CICS memory/buffer
               management.

               The most efficient CI size in terms of space is 18432,
               for 3390 devices.  Use this CI size for all non-CICS
               files. CICS works fine with 18K CI sizes, but there may
               be some inefficiencies with buffering in a production
               environment.

               The current recommendation for CICS files is 4096
               or 8192 for production files. You can use TSO
               AMSSPACE to see which size uses space more
               efficiently.

               If the index cisize is less than 2K, it will be red.
               If the index cisize is gt   than 2K, it will be yellow.

               If the data cisize is less than 4K, it will be red.

CI free bytes: This is how many free bytes, as determined by the
      0        percent of free space is specified for the control
               interval, are available for record insertion. If
               this value is less than the average record length,
               it will be red.

               Further up on this screen free space percent
               values are calculated for you to accomodate 1 thru
               9 record insertions per control interval.

NOTE: For people using Datapacker: If you're using Datapacker to
save space, good for you. Unfortunately, you're probably paying
more than you're saving in CPU costs--it costs 2 or 3 times more
CPU to compress or decompress a record than to merely read it. If
you have files that are not sequentially processed every day,
Datapacker may still be a good bet. Or try the RC (repetitive
character) compression method, which is a much cheaper method CPU
wise, but still gives good compression.

Bottom line: The bottom line for VSAM space management is how
much you are paying for your VSAM files. With managed VSAM files,
you will realize the benefits of having your VSAM files
automatically monitored and resized based on actual use, allowing
you to have VSAM files with less wasted unused space, and tighter
free space paramaters.

To automatically monitor and resize your files, you need to run
the batch version of this program in CA7 as follows:

//STEP010  EXEC PGM=IKJEFT01
//REGISET   DD DSN=SYS3B.#BMC.BCSS.REGISET,DISP=SHR
//ISPLLIB   DD DSN=your.prod.loadlib,DISP=SHR     ** AP1PISPF **
//ISPMLIB   DD DSN=SYS1.ISPMLIB,DISP=SHR
//ISPPLIB   DD DSN=SYS1.ISPPLIB,DISP=SHR
//          DD DSN=NBSP.ISPPLIB,DISP=SHR
//ISPSLIB   DD DSN=SYS1.ISPSLIB,DISP=SHR
//          DD DSN=NBSP.ISPSLIB,DISP=SHR
//ISPTLIB   DD DSN=SYS1.ISPTLIB,DISP=SHR
//ISPFILE   DD DSN=your.jcl( 1),DISP=(,CATLG,DELETE),     ** JCL **
//             SPACE=(TRK,(1,5),RLSE),
//             RECFM=FB,LRECL=80,BLKSIZE=0
//DSNLIST   DD DSN=your.parmlib(datasets),DISP=SHR   ** DATASETS **
//SYSIN     DD SPACE=(TRK,1),
//             RECFM=FB,LRECL=80,BLKSIZE=0
//LISTCAT   DD SPACE=(TRK,1),
//             RECFM=VBA,LRECL=125,BLKSIZE=0
//EXCPRPT   DD SYSOUT=*,RECFM=FBA            ** EXCEPTION REPORT **
//CHNGRPT   DD SYSOUT=*,RECFM=FBA            ** CHANGE    REPORT **
//SYSPRINT  DD SYSOUT=*
//SYSLBC    DD DSN=SYS1.BRODCAST,DISP=SHR
//ISPLOG    DD SYSOUT=*,RECFM=VBA,LRECL=125,BLKSIZE=2040
//ISPPROF   DD SPACE=(CYL,(1,1,1),RLSE),
//             RECFM=FB,LRECL=80,BLKSIZE=6160
//SYSTSPRT  DD SYSOUT=*
//SYSOUT    DD SYSOUT=*
//SYSIN     DD DUMMY
//SYSTSIN   DD *
 ISPSTART PGM(AP1PISPF) PARM(eiiiihhhhhhhhjjjjjjjjm)
//SUBMIT   EXEC PGM=ICEGENER
//SYSIN     DD DUMMY
//SYSUT1    DD DSN=your.jcl( 1),DISP=SHR        ** GENERATED JCL **
//SYSUT2    DD SYSOUT=(A,INTRDR)    ** SUBMIT TO INTERNAL READER **
//SYSPRINT  DD SYSOUT=*

PARM LAYOUT:

Card column(s)     Value

   1   -   1       Environment: F (foreground) or B (background).
                   For a batch job, make sure you specify B .

   2   -   5       Image: TEST or PROD. This parameter inserts the
                   VOLUME word for production, leaves it off for
                   test. Also forces a data cisize of 18432 for
                   test files.

   6   -  13       High level qualifer of the job-temporary backup
                   dataset of each VSAM file. The job you submit
                   must have Top Secret or RACF access to that
                   HLQ.

  14   -  21       Jobname of the generated job. The first 4
                   characters must match the jobname of the
                   submitting job to pass Top Secret or RACF
                   security.

  22   -  22       Message class of the submitted job. All job messages
                   and utility SYSPRINT will go to this class.
                   Secret or RACF access to that HLQ.

  14   -  21       Jobname of the generated job. The first 4
                   characters must match the jobname of the
                   submitting job to pass Top Secret or RACF
                   security.

  22   -  22       Message class of the submitted job. All job
                   messages and utility SYSPRINT will go to this
                   class.

Input card layout (//DSNLIST file):

 Card column(s)    Value
  1   -    1       '*' is a comment card
                   'S' simulates only. No JCL is created, but
                   reports are.
  2   -   39       VSAM KSDS cluster name (do NOT specify a base
                   cluster of an AIX).
 40   -   80       PDS and PDS member name that is to receive the
                   new DELETE/DEFINE cards for the given dataset.
                   For example: your.prod.PARMLIB(whatever). You may
                   leave this field blank.

[ End of scrollable display screen ]


Customization and opportunities for upgrades:
1)  You'll want to change the jobcard
2)  If you don't have Datapacker (or Data Accelerator, same thing),
    you'll need to dummy out //REGISET in the batch JCL, and dummy
    out the REGISET in the allocation CLIST (VSAMCL). I think you'll
    need to add AMP=('AMORG'), because it's a VSAM file. Or better yet,
    add the OPTIONAL clause to the FD in the pgm (VSAMPGM) and pass it
    a parm indicating "NO DATAPACKER--DO NOT OPEN REGISET".
3)  If you do have Data Packer, you'll need to change the dataset name
    in the JCL and in the CLIST to point to your file.
4)  This function does not support the SMS STORCLAS parameter, nor
    other SMS parameters. The VOLUME is preserved.
5)  I forget if this function supports multi-volume datasets. You'll
    have to test.
6)  This function has not been tested with SMS compressed data. I'm
    sure it'll work, but chances are really good that the space
    parameters will be warped.
7)  You may need to change the cost factor in the pgm (VSAMPGM). The
    field name is WS-DAILY-GB-COST (currently $19.82). The GB stands
    for gigabyte.
THE PGM IS SETUP FOR 3390 DRIVES!!!!!!
8)  When new disk drives come out, you may need to change
    WS-TRACKS-PER-CYL (currently 15).
9)  When new disk drives come out, you may need to change
    WS-GIGABYTE-PER-CYL (currently .000811).
10) When new disk drives come out, you may need to change
    the hardcoded factor of 21 (which represents number of 2K
    cisizes per track). Look for INDXPRIM.
11) When new disk drives come out, you may need to change
    where WS-CIS-FOR-INDEX-SET is calculated; you may need to
    change the hard-coded factor 248. OK, I'm sorry, but I forgot
    to document what 248 means. I got the number from a REAL VSAM
    guru. Maybe it's 248 something's per index block.
12) When new disk drives come out, you may need to change
    the EVALUATE clause in paragraf 0518- (where WS-BLOCKS-PER-TRACK
    is calculated).

Geoffrey McIntyre
geoffrey.mcintyre@firstunion.com
Charlotte, NC
